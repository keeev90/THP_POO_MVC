require 'controller'

class Router
  
  #On veut qu'un "Router.new" lanc√© par app.rb, cr√©e automatiquement une instance "@controller" passe-plat vers les m√©thodes de classe Controller
  def initialize
    @controller = Controller.new
  end

  #rappelle-toi que l'on fait "Router.new.perform" dans app.rb => apr√®s initialize, on d√©finit donc perform.
  def perform 
    puts
    puts " ‚≠ê‚≠ê‚≠ê BIENVENUE DANS THE GOSSIP PROJECT ‚≠ê‚≠ê‚≠ê"
    puts

    while true

      #on affiche le menu
      puts "Tu veux faire quoi jeune mouss' ? Entre le num√©ro correspondant √† ta demande."
      puts
      puts "1. Je veux cr√©er un gossip üì¢" 
      puts "2. Je veux voir l'ensemble des gossips üîç"
      puts "3. Je veux supprimer un gossip ‚ùå"
      puts "4. Je veux quitter l'app üëã"
      print "> "
      params = gets.chomp.to_i #on attend le choix de l'utilisateur
      puts 
      
      case params #en fonction du choix
      when 1
        puts "Tu as choisi de cr√©er un gossip" 
        @controller.create_gossip
        puts "Bravo champion, ton gossip est bien cr√©√©." 
      
      when 2
        puts "Tu as choisi de voir l'ensemble des gossips. Et voici, √† votre service : "
        @controller.index_gossips
      
      when 3
        puts "Tu as choisi de supprimer un gossip" 
        @controller.delete_gossip
        puts "Le gossip est bien supprim√©." 

      when 4
        puts "Ciao l'artiste ! (t'as raison barre-toi, les ragots c'est mauvais pour la sant√©) "
        break #Ce "break" permet de sortir de la boucle while. C'est m√™me la seule fa√ßon d'en sortir.

      else
        puts "Pas si vite la mouche ! Ce choix n'existe pas, merci de ressayer" #Si l'utilisateur saisit une entr√©e non pr√©vue, il retourne au d√©but du "while true". 
        #C'est pour √ßa que la boucle est infinie: potentiellement, il peut se gourer jusqu'√† la fin des temps :)
      end
    end
  end
end
